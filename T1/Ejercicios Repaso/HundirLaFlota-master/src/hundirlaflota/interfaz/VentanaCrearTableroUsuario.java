/*
 * Copyright (C) 2020 Javier Tejedor
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package hundirlaflota.interfaz;

import hundirlaflota.Controladora;
import hundirlaflota.tablero.Casilla;
import hundirlaflota.tablero.Index;
import hundirlaflota.tablero.tipocasilla.Destructor;
import hundirlaflota.tablero.tipocasilla.Escolta;
import hundirlaflota.tablero.tipocasilla.Portaaviones;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

/**
 *
 * @author Javier Tejedor
 */
public class VentanaCrearTableroUsuario extends javax.swing.JFrame implements ActionListener {

    private Controladora c;

    private JButton[][] botonesJugador;
    private int contadorBarcos;
    private int contadorPulsacionBotones;
    private int[] posInicial;
    private int[] posFinal;

    /**
     * Crea una nueva ventana para crear el tablero del jugador Humano
     *
     * @param c Una instancia de la clase controladora
     */
    public VentanaCrearTableroUsuario(Controladora c) {
        contadorBarcos = 1;
        contadorPulsacionBotones = 1;
        this.c = c;
        initComponents();
        inicializarPanel();
    }

    private void inicializarPanel() {
        setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(Controladora.ICONO_APP).getImage());
        this.setTitle("CREA TU TABLERO");
        this.setSize(new Dimension(50 * Casilla.FILA_MAX, 70 * Casilla.COLUMNA_MAX));
        this.setResizable(false);

        botonesJugador = new JButton[Casilla.FILA_MAX][Casilla.COLUMNA_MAX];
        JPanel panelJugador = new JPanel(new GridLayout(Casilla.FILA_MAX, Casilla.COLUMNA_MAX));
        panelJugador.setBackground(new Color(51, 102, 0));
        panelJugador.setPreferredSize(new Dimension(35 * Casilla.FILA_MAX, 35 * Casilla.COLUMNA_MAX));
        panelJugador.setOpaque(false);
        JPanel panel2 = new JPanel();

        for (int i = Casilla.FILA_MIN; i < Casilla.FILA_MAX; i++) {
            for (int j = Casilla.COLUMNA_MIN; j < Casilla.COLUMNA_MAX; j++) {
                JButton botonJugador = new JButton();
                botonJugador.setOpaque(true);
                botonJugador.setBackground(Casilla.COLOR_AGUA);
                botonJugador.setBorder(new LineBorder(Color.BLACK));
                botonJugador.setActionCommand(i + ":" + j);
                botonJugador.addActionListener(this);
                botonesJugador[i][j] = botonJugador;
                panelJugador.add(botonesJugador[i][j]);
            }
        }
        panel2.add(cmdAceptar);
        this.setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 1, 0, GridBagConstraints.SOUTH, GridBagConstraints.NONE, new Insets(15, 15, 5, 15), 10, 10);
        add(panelJugador, gbc);
        gbc.gridy = 1;
        add(panel2, gbc);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmdAceptar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cmdAceptar.setText("Aceptar");
        cmdAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(316, Short.MAX_VALUE)
                .addComponent(cmdAceptar)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmdAceptar)
                .addContainerGap(264, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmdAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmdAceptarActionPerformed
        // TODO add your handling code here:
        try {
            switch (contadorBarcos) {
                case 1:
                    if (this.c.getHumano().getTableroPropio().cambiarTipoCasillas(posInicial, posFinal, new Escolta())) {
                        contadorBarcos++;
                    } else {
                        JOptionPane.showMessageDialog(this, "El escolta solo ocupa 2 casillas");
                    }

                    actualizarCasillas();
                    break;
                case 2:
                    if (this.c.getHumano().getTableroPropio().cambiarTipoCasillas(posInicial, posFinal, new Destructor())) {
                        contadorBarcos++;
                    } else {
                        JOptionPane.showMessageDialog(this, "El destructor ocupa 3 casillas y no debe tocar a ningun otro barco");
                    }

                    actualizarCasillas();
                    break;
                case 3:
                    if (this.c.getHumano().getTableroPropio().cambiarTipoCasillas(posInicial, posFinal, new Portaaviones())) {
                        contadorBarcos++;
                    } else {
                        JOptionPane.showMessageDialog(this, "El portaaviones ocupa 4 casillas y no debe tocar a ningun otro barco");
                    }

                    actualizarCasillas();
                    break;
                default:
                    this.c.getMaquina().setTableroDeJuego(this.c.getHumano().getTableroPropio());
                    this.c.getHumano().setTableroDeJuego(this.c.getMaquina().getTableroPropio());
                    new VentanaTableros(c).setVisible(true);
                    this.dispose();
                    break;
            }
        } catch (NullPointerException ex) {
            JOptionPane.showMessageDialog(this, "Debes seleccionar dos casillas");
        }
    }//GEN-LAST:event_cmdAceptarActionPerformed

    /**
     * Actualiza la selección de las casillas.
     *
     * @param ae Evento de acción del botón
     */
    @Override
    public void actionPerformed(ActionEvent ae) {
        int fila = Integer.parseInt(ae.getActionCommand().split(":")[0]);
        int columna = Integer.parseInt(ae.getActionCommand().split(":")[1]);
        if (contadorPulsacionBotones % 2 == 1) {
            actualizarCasillas();
            posFinal = new int[]{0, 0};
            posInicial = new int[]{fila, columna};
            botonesJugador[fila][columna].setText("1");
            contadorPulsacionBotones++;
        } else {
            posFinal = new int[]{fila, columna};
            botonesJugador[fila][columna].setText("2");
            contadorPulsacionBotones++;
        }
    }

    /**
     * Una vez que se cambian las casillas de estado, se actualiza su color.
     */
    public void actualizarCasillas() {
        for (int i = Casilla.FILA_MIN; i < Casilla.FILA_MAX; i++) {
            for (int j = Casilla.COLUMNA_MIN; j < Casilla.COLUMNA_MAX; j++) {
                if (contadorBarcos > 3) {
                    botonesJugador[i][j].setEnabled(false);
                }
                botonesJugador[i][j].setText("");
                switch (this.c.getHumano().getTableroPropio().get(new Index(new int[]{i, j})).getTipo().getTipoIndex()) {
                    case 1:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO1);
                        break;
                    case 2:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO2);
                        break;
                    case 3:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO3);
                        break;
                    default:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_AGUA);
                        break;
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmdAceptar;
    // End of variables declaration//GEN-END:variables
}
