/*
 * Copyright (C) 2020 Javier Tejedor
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package hundirlaflota.interfaz;

import hundirlaflota.Controladora;
import hundirlaflota.tablero.Casilla;
import hundirlaflota.tablero.Index;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.border.LineBorder;

/**
 *
 * Ventana de Juego
 *
 * @author Javier Tejedor
 */
public class VentanaTableros extends javax.swing.JFrame implements ActionListener {

    Controladora c;

    private JButton[][] botonesJugador;
    private JLabel jugadorLabel;
    private JButton[][] botonesOponente;
    private JLabel maquinaLabel;

    /**
     * Crea una nueva ventana con los dos tableros de juego.
     *
     * @param c Una instancia de la clase controladora.
     */
    public VentanaTableros(Controladora c) {
        this.c = c;
        initComponents();
        inicializarPanel();
    }

    private void inicializarPanel() {
        setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(Controladora.ICONO_APP).getImage());
        this.setTitle("¡¡¡A JUGAR!!!");
        jugadorLabel = new JLabel("TU TABLERO");
        maquinaLabel = new JLabel("SU TABLERO");

        this.setSize(new Dimension(90 * Casilla.FILA_MAX, 70 * Casilla.COLUMNA_MAX));
        this.setResizable(false);
        botonesJugador = new JButton[Casilla.FILA_MAX][Casilla.COLUMNA_MAX];
        botonesOponente = new JButton[Casilla.FILA_MAX][Casilla.COLUMNA_MAX];

        JPanel panelJugador = new JPanel(new GridLayout(Casilla.FILA_MAX, Casilla.COLUMNA_MAX));
        panelJugador.setBackground(new Color(51, 102, 0));
        panelJugador.setPreferredSize(new Dimension(35 * Casilla.FILA_MAX, 35 * Casilla.COLUMNA_MAX));
        panelJugador.setOpaque(false);

        JPanel panelOponente = new JPanel(new GridLayout(Casilla.FILA_MAX, Casilla.COLUMNA_MAX));
        panelOponente.setBackground(new Color(255, 80, 80));
        panelOponente.setPreferredSize(new Dimension(35 * Casilla.FILA_MAX, 35 * Casilla.COLUMNA_MAX));
        panelOponente.setOpaque(false);

        for (int i = Casilla.FILA_MIN; i < Casilla.FILA_MAX; i++) {
            for (int j = Casilla.COLUMNA_MIN; j < Casilla.COLUMNA_MAX; j++) {
                JButton botonJugador = new JButton();
                botonJugador.setEnabled(false);
                botonJugador.setOpaque(true);
                botonJugador.setIcon(new ImageIcon(Controladora.IMAGEN_VACIA));
                botonJugador.setBorder(new LineBorder(Color.BLACK));
                botonesJugador[i][j] = botonJugador;
                panelJugador.add(botonesJugador[i][j]);

                JButton botonOponente = new JButton();
                botonOponente.setBackground(Casilla.COLOR_AGUA);
                botonOponente.setBorder(new LineBorder(Color.BLACK));
                botonOponente.setIcon(new ImageIcon(Controladora.IMAGEN_VACIA));
                botonOponente.setOpaque(true);
                botonOponente.setFocusPainted(false);
                botonOponente.setActionCommand(i + ":" + j);
                botonOponente.addActionListener(this);
                botonesOponente[i][j] = botonOponente;
                panelOponente.add(botonesOponente[i][j]);
            }
        }

        this.setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints(0, 0, 1, 1, 1, 0, GridBagConstraints.SOUTH, GridBagConstraints.NONE, new Insets(15, 15, 5, 15), 10, 10);
        add(panelJugador, gbc);
        gbc.gridy = 1;
        add(jugadorLabel, gbc);
        gbc.gridy = 0;
        gbc.gridx = 1;
        add(panelOponente, gbc);
        colorearCasillas();
        gbc.gridy = 1;
        add(maquinaLabel, gbc);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(getIconImage());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Evento que gestiona los disparos.
     *
     * @param ae Action Event de los botones
     */
    @Override
    public void actionPerformed(ActionEvent ae) {

        int fila = Integer.parseInt(ae.getActionCommand().split(":")[0]);
        int columna = Integer.parseInt(ae.getActionCommand().split(":")[1]);
        int[] pos = {fila, columna};
        this.c.getHumano().cambiarEstadoCasilla(pos);
        boolean correcto = actualizarCasillaTableroMaquina(pos);

        if (correcto) {
            int[] disparo = this.c.getMaquina().realizarDisparo();
            actualizarCasillaTableroJugador(disparo);
        }
        comprobarVictoria();
    }

    /**
     * Este metodo actualiza las casillas del tablero del jugador máquina.
     *
     * @param pos La posicion disparada.
     * @return Devuelve true si se ha actualizado correctamente
     */
    public boolean actualizarCasillaTableroMaquina(int[] pos) {
        this.c.getMaquina().setTableroPropio(this.c.getHumano().getTableroDeJuego());
        if (this.c.getMaquina().getTableroPropio().get(new Index(pos)).getTipo().isTocado()) {
            botonesOponente[pos[0]][pos[1]].setEnabled(false);
            if (this.c.getMaquina().getTableroPropio().get(new Index(pos)).tieneBarco()) {
                botonesOponente[pos[0]][pos[1]].setBackground(Casilla.COLOR_IMPACTADA);
                return true;
            } else if (!this.c.getMaquina().getTableroPropio().get(new Index(pos)).tieneBarco()) {
                botonesOponente[pos[0]][pos[1]].setBackground(Casilla.COLOR_ATACADA);
                return true;
            }
        }
        return false;
    }

    /**
     * Este metodo actualiza las casillas del tablero del jugador humano.
     *
     * @param pos La posicion disparada.
     */
    public void actualizarCasillaTableroJugador(int[] pos) {
        this.c.getHumano().setTableroPropio(this.c.getMaquina().getTableroDeJuego());
        if (this.c.getMaquina().getTableroDeJuego().get(new Index(pos)).tieneBarco()) {
            botonesJugador[pos[0]][pos[1]].setBackground(Casilla.COLOR_IMPACTADA);
            this.c.getMaquina().setUltimoDisparoCertero(pos);
        } else if (!this.c.getMaquina().getTableroDeJuego().get(new Index(pos)).tieneBarco()) {
            botonesJugador[pos[0]][pos[1]].setBackground(Casilla.COLOR_ATACADA);

        }
    }

    /**
     * Este metodo rellena de colores respectivos a tus barcos.
     */
    public void colorearCasillas() {
        for (int i = Casilla.FILA_MIN; i < Casilla.FILA_MAX; i++) {
            for (int j = Casilla.COLUMNA_MIN; j < Casilla.COLUMNA_MAX; j++) {
                botonesJugador[i][j].setText("");
                switch (this.c.getHumano().getTableroPropio().get(new Index(new int[]{i, j})).getTipo().getTipoIndex()) {
                    case 1:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO1);
                        break;
                    case 2:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO2);
                        break;
                    case 3:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_BARCO3);
                        break;
                    default:
                        botonesJugador[i][j].setBackground(Casilla.COLOR_AGUA);
                        break;
                }
            }
        }
    }

    /**
     * Este metodo comprueba si alguno de los jugadores ha ganado.
     */
    public void comprobarVictoria() {
        int cJugador = 0;
        for (JButton[] jButtons : botonesJugador) {
            for (JButton jButton : jButtons) {
                cJugador += jButton.getBackground().equals(Casilla.COLOR_IMPACTADA) ? 1 : 0;
            }
        }
        int cOponente = 0;
        for (JButton[] jButtons : botonesOponente) {
            for (JButton jButton : jButtons) {
                cOponente += jButton.getBackground().equals(Casilla.COLOR_IMPACTADA) ? 1 : 0;
            }
        }
        if (cJugador == Controladora.partesTotales
                && cOponente != Controladora.partesTotales) {
            int eleccion = JOptionPane.showConfirmDialog(this, "HAS PERDIDO, ¿QUIERES VOLVER A JUGAR?", "", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {

                new PantallaSelectorModo(new Controladora()).setVisible(true);
                this.dispose();
            } else {
                this.dispose();
            }
        } else if (cJugador != Controladora.partesTotales
                && cOponente == Controladora.partesTotales) {
            int eleccion = JOptionPane.showConfirmDialog(this, "HAS GANADO, ¿QUIERES VOLVER A JUGAR?", "", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {

                new PantallaSelectorModo(new Controladora()).setVisible(true);
                this.dispose();
            } else {
                this.dispose();
            }
        } else if (cJugador == Controladora.partesTotales
                && cOponente == Controladora.partesTotales) {
            int eleccion = JOptionPane.showConfirmDialog(this, "EMPATE, ¿QUIERES VOLVER A JUGAR?", "", JOptionPane.YES_NO_OPTION);
            if (eleccion == JOptionPane.YES_OPTION) {

                new PantallaSelectorModo(new Controladora()).setVisible(true);
                this.dispose();
            } else {
                this.dispose();
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
